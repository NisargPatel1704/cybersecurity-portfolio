import argparse
import os
import sys
import pandas as pd
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
import xml.etree.ElementTree as ET
from datetime import datetime

class ReportGenerator:
    """
    Generates a professional PDF vulnerability assessment report from an Nmap XML scan file.
    """
    def __init__(self, nmap_xml_path: str, output_dir: str, company_name: str = "Client Inc."):
        if not os.path.exists(nmap_xml_path):
            raise FileNotFoundError(f"Nmap XML file not found at: {nmap_xml_path}")
        self.nmap_xml_path = nmap_xml_path
        self.output_dir = output_dir
        self.company_name = company_name
        self.findings = []
        self.host_os_map = {}

        os.makedirs(self.output_dir, exist_ok=True)
        self.styles = getSampleStyleSheet()
        self.styles.add(ParagraphStyle(name='Justify', alignment=4)) # Justify alignment

    def parse_nmap_xml(self):
        """Parses the Nmap XML file to extract detailed findings."""
        print(f"[+] Parsing Nmap XML file: {self.nmap_xml_path}")
        tree = ET.parse(self.nmap_xml_path)
        root = tree.getroot()

        for host in root.findall("host"):
            ip_address = host.find("address").get("addr")
            os_match = host.find(".//osmatch")
            if os_match is not None:
                self.host_os_map[ip_address] = os_match.get("name", "Unknown OS")
            
            ports = host.find("ports")
            if ports is None:
                continue
            
            for port in ports.findall("port"):
                if port.find("state").get("state") != "open":
                    continue
                
                finding = {
                    "ip_address": ip_address,
                    "port": port.get("portid"),
                    "protocol": port.get("protocol"),
                    "service": "unknown",
                    "version": "",
                    "vulnerabilities": []
                }
                
                service_elem = port.find("service")
                if service_elem is not None:
                    finding["service"] = service_elem.get("name", "unknown")
                    finding["version"] = service_elem.get("product", "")
                    if service_elem.get("version"):
                        finding["version"] += f" {service_elem.get('version')}"

                for script in port.findall("script"):
                    if script.get("id") == "vulners" or "vuln" in script.get("id"):
                        vuln_output = script.get("output", "").strip()
                        finding["vulnerabilities"].append(vuln_output)
                
                self.findings.append(finding)
        print(f"[+] Found {len(self.findings)} open ports on {len(self.host_os_map)} hosts.")

    def generate_charts(self) -> dict:
        """Generates matplotlib charts and returns their file paths."""
        if not self.findings:
            return {}
            
        df = pd.DataFrame(self.findings)
        chart_paths = {}

        # Services Distribution Chart
        plt.figure(figsize=(8, 6))
        service_counts = df['service'].value_counts().nlargest(10)
        service_counts.plot(kind='bar', color='skyblue')
        plt.title('Top 10 Open Services')
        plt.ylabel('Number of Hosts')
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        service_chart_path = os.path.join(self.output_dir, "services_distribution.png")
        plt.savefig(service_chart_path)
        plt.close()
        chart_paths['services'] = service_chart_path
        print(f"[+] Service distribution chart saved to {service_chart_path}")

        return chart_paths

    def generate_pdf_report(self):
        """Builds the final PDF report."""
        self.parse_nmap_xml()
        if not self.findings:
            print("[!] No open ports or findings to report. Aborting PDF generation.")
            return

        charts = self.generate_charts()
        report_path = os.path.join(self.output_dir, "vulnerability_assessment_report.pdf")
        doc = SimpleDocTemplate(report_path, pagesize=letter)
        
        story = []

        # Title Page
        story.append(Paragraph("Network Vulnerability Assessment Report", self.styles['Title']))
        story.append(Spacer(1, 0.5 * inch))
        story.append(Paragraph(f"Prepared for: {self.company_name}", self.styles['h2']))
        story.append(Paragraph(f"Date of Assessment: {datetime.now().strftime('%Y-%m-%d')}", self.styles['h2']))
        story.append(Spacer(1, 2 * inch))

        # Executive Summary
        story.append(Paragraph("Executive Summary", self.styles['h1']))
        summary_text = (
            f"This report details the findings of a network vulnerability assessment conducted on {datetime.now().strftime('%B %d, %Y')}. "
            f"The assessment identified {len(self.host_os_map)} active hosts and a total of {len(self.findings)} open services. "
            "Key findings and detailed vulnerabilities are outlined in the subsequent sections. Recommendations for remediation should be prioritized based on the severity of the identified issues."
        )
        story.append(Paragraph(summary_text, self.styles['Justify']))
        story.append(Spacer(1, 0.5 * inch))

        # Charts
        if charts.get('services'):
            story.append(Paragraph("Services Distribution", self.styles['h2']))
            story.append(Image(charts['services'], width=6*inch, height=4.5*inch))
            story.append(Spacer(1, 0.2 * inch))
        
        # Detailed Findings Table
        story.append(Paragraph("Detailed Findings", self.styles['h1']))
        table_data = [["IP Address", "Port/Proto", "Service", "Version", "Identified Vulnerabilities"]]
        
        for item in self.findings:
            vulns = "\n".join(item['vulnerabilities']) if item['vulnerabilities'] else "None detected"
            table_data.append([
                Paragraph(item['ip_address'], self.styles['Normal']),
                f"{item['port']}/{item['protocol']}",
                Paragraph(item['service'], self.styles['Normal']),
                Paragraph(item['version'], self.styles['Normal']),
                Paragraph(vulns.replace('\n', '<br/>'), self.styles['Normal'])
            ])

        table = Table(table_data, colWidths=[1.2*inch, 0.8*inch, 1.2*inch, 2*inch, 2.3*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(table)

        doc.build(story)
        print(f"[SUCCESS] PDF report generated at: {report_path}")

def main():
    parser = argparse.ArgumentParser(description="Automated Network Vulnerability Report Generator")
    parser.add_argument("-i", "--input", required=True, help="Path to the Nmap XML scan results file.")
    parser.add_argument("-o", "--outputdir", default="reports", help="Directory to save the PDF report and charts.")
    parser.add_argument("--client", default="Client Inc.", help="Name of the client for the report title.")
    args = parser.parse_args()
    
    try:
        reporter = ReportGenerator(args.input, args.outputdir, args.client)
        reporter.generate_pdf_report()
    except Exception as e:
        print(f"[ERROR] Failed to generate report: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
