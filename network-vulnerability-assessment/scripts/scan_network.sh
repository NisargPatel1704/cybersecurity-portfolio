#!/bin/bash
##############################################
# üõ°Ô∏è Automated Network Vulnerability Scanner #
##############################################
# Reads config from scan_config.cfg and runs
# Nmap (and optional Nessus) scans.
##############################################

CONFIG_FILE="scan_config.cfg"

# Function to read values from config
get_config() {
    grep "^$1=" "$CONFIG_FILE" | cut -d'=' -f2- | tr -d '"'
}

# Load values
TARGETS=$(get_config "TARGETS")
SCAN_TYPE=$(get_config "SCAN_TYPE")
OS_DETECTION=$(get_config "OS_DETECTION")
SERVICE_DETECTION=$(get_config "SERVICE_DETECTION")
VULN_SCRIPTS=$(get_config "VULN_SCRIPTS")
NSE_CATEGORIES=$(get_config "NSE_CATEGORIES")
PORT_MODE=$(get_config "PORT_MODE")
SPEED=$(get_config "SPEED")
MAX_RETRIES=$(get_config "MAX_RETRIES")
MAX_PARALLELISM=$(get_config "MAX_PARALLELISM")
OUTPUT_FORMATS=$(get_config "OUTPUT_FORMATS")
TIMESTAMP_RESULTS=$(get_config "TIMESTAMP_RESULTS")
NESSUS_ENABLED=$(get_config "NESSUS_ENABLED")
NESSUS_API=$(get_config "NESSUS_API")
NESSUS_USER=$(get_config "NESSUS_USER")
NESSUS_PASS=$(get_config "NESSUS_PASS")
NESSUS_POLICY=$(get_config "NESSUS_POLICY")

# Timestamp for output files
if [ "$TIMESTAMP_RESULTS" == "yes" ]; then
    TS=$(date +"%Y%m%d_%H%M%S")
else
    TS="latest"
fi

OUTPUT_DIR="scans/results_$TS"
mkdir -p "$OUTPUT_DIR"

##############################################
# Run Nmap Scan
##############################################
echo "[*] Running Nmap scan on: $TARGETS"

# Build Nmap command
NMAP_CMD="nmap $SCAN_TYPE $PORT_MODE --max-retries $MAX_RETRIES --min-parallelism $MAX_PARALLELISM -$SPEED"

if [ "$OS_DETECTION" == "yes" ]; then
    NMAP_CMD="$NMAP_CMD -O"
fi

if [ "$SERVICE_DETECTION" == "yes" ]; then
    NMAP_CMD="$NMAP_CMD -sV"
fi

if [ "$VULN_SCRIPTS" == "yes" ]; then
    NMAP_CMD="$NMAP_CMD --script=$NSE_CATEGORIES"
fi

# Add output formats
for fmt in $OUTPUT_FORMATS; do
    case $fmt in
        xml) OUT_OPT="-oX $OUTPUT_DIR/nmap_results.xml" ;;
        txt) OUT_OPT="-oN $OUTPUT_DIR/nmap_results.txt" ;;
        gnmap) OUT_OPT="-oG $OUTPUT_DIR/nmap_results.gnmap" ;;
    esac
    NMAP_CMD="$NMAP_CMD $OUT_OPT"
done

# Final target append
NMAP_CMD="$NMAP_CMD $TARGETS"

echo "[*] Executing: $NMAP_CMD"
eval $NMAP_CMD

echo "[+] Nmap scan completed. Results saved in $OUTPUT_DIR"


##############################################
# Run Nessus Scan (Optional)
##############################################
if [ "$NESSUS_ENABLED" == "yes" ]; then
    echo "[*] Starting Nessus scan..."
    echo "   API: $NESSUS_API"
    echo "   User: $NESSUS_USER"
    echo "   Policy: $NESSUS_POLICY"
    echo "   (This section would use curl to trigger Nessus scans via API)"
    echo "   ‚ö†Ô∏è Placeholder: Requires Nessus Pro or Essentials with API access"
    echo "[+] Nessus integration not fully implemented in demo."
fi
